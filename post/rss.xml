<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Sakura Notes</title><link>/post/</link><description>Recent content in Posts on Sakura Notes</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 08 Aug 2024 13:27:42 +0800</lastBuildDate><atom:link href="/post/rss.xml" rel="self" type="application/rss+xml"/><item><title>queue队列</title><link>/post/queue-queue-z1b93g7.html</link><pubDate>Thu, 08 Aug 2024 00:00:00 +0800</pubDate><guid>/post/queue-queue-z1b93g7.html</guid><description>queue队列 queue队列 底层实现 支持empty，size，front，back，push_back，pop_front 的容器 底层容器：d</description></item><item><title>元组</title><link>/post/turtle-1geggg.html</link><pubDate>Thu, 18 Jul 2024 17:12:05 +0800</pubDate><guid>/post/turtle-1geggg.html</guid><description>元组 STL通常没有实现对应的哈希函数，因此在使用unordered_map/unordered_set时不能直接使用 pair对值 #include &amp;lt;utility&amp;gt; std::pair&amp;lt;int, char&amp;gt; mypair(std::make_pair(20, &amp;#39;b&amp;#39;));</description></item><item><title>哈希表</title><link>/post/hash-table-z26kjag.html</link><pubDate>Thu, 18 Jul 2024 16:33:36 +0800</pubDate><guid>/post/hash-table-z26kjag.html</guid><description>哈希表 装填因子 定义：元素个数/表长 最大装填因子一般取 0.5 &amp;lt;= α&amp;lt;= 0.85 平均查找长度 查找成功时的平均查找长度 = 表中每个元素查找成功时的比较次数</description></item><item><title>map字典</title><link>/post/map-dictionary-z1xnnbh.html</link><pubDate>Thu, 18 Jul 2024 16:23:58 +0800</pubDate><guid>/post/map-dictionary-z1xnnbh.html</guid><description>map字典 成员函数 函数 功能 empty() 判空 map 底层实现：红黑树，查找时间复杂度为$O(logn)$ 按key进行排序，默认std::less从小到大 key</description></item><item><title>stack栈</title><link>/post/stack-stack-zfgeku.html</link><pubDate>Thu, 18 Jul 2024 16:23:17 +0800</pubDate><guid>/post/stack-stack-zfgeku.html</guid><description>stack栈 栈 特点： 先入后出 #include &amp;lt;stack&amp;gt; stack&amp;lt;int&amp;gt; st; 底层实现 支持empty()、back()、push_back()、pop_back()的容器 底层容器：v</description></item><item><title>树</title><link>/post/tree-zytrkb.html</link><pubDate>Thu, 18 Jul 2024 16:17:27 +0800</pubDate><guid>/post/tree-zytrkb.html</guid><description>树 树 结点总数 = Σ（度数*该度数对应的结点数）+1 = 度不为0的节点数 + 叶子节点数 二叉树 哈夫曼树（最优二叉树） 原理：贪心算法。每次选k个权重最小</description></item><item><title>链表</title><link>/post/linked-z1xhzbs.html</link><pubDate>Thu, 18 Jul 2024 16:17:21 +0800</pubDate><guid>/post/linked-z1xhzbs.html</guid><description>链表 单向链表 #include &amp;lt;forward_list&amp;gt; push_front() // 无push_back() emplace_front() front() // 无back() int size = std::distance(std::begin(v), std::end(v)); 成员函数 不支持size() 函数 功能 before_begin() 返回指向第一个元素之前位置的迭</description></item><item><title>文件</title><link>/post/document-z112xbv.html</link><pubDate>Sun, 14 Jul 2024 12:07:08 +0800</pubDate><guid>/post/document-z112xbv.html</guid><description>文件 inode元信息 相关inode命令参考inode 硬盘格式化时分为两个区域：数据区、inode区 inode节点大小为128B 或 256B，节</description></item><item><title>数字</title><link>/post/number-z2upfwa.html</link><pubDate>Sun, 14 Jul 2024 12:05:30 +0800</pubDate><guid>/post/number-z2upfwa.html</guid><description>数字 大小范围（数值极限） 数据类型 大小 头文件 INT_MAX INT_MIN 2147483647(10位) -2147483648 limits.h FLT_MAX FLT_MIN limits.h DBL_MAX DBL_MIN float.h LONG_MAX LONG_MIN LLONG_MAX LLONG_MIN float能表示的最大正整数为2^32 d</description></item><item><title>模板</title><link>/post/template-zgwqlc.html</link><pubDate>Fri, 12 Jul 2024 16:41:44 +0800</pubDate><guid>/post/template-zgwqlc.html</guid><description>模板 特点： 作用：减少重复代码的编写 非类型参数模板 特点： 仅能使用int、char、short等整数，不能使用浮点数或字符串 作用：将常量值作为模</description></item><item><title>编译</title><link>/post/compile-u6c6n.html</link><pubDate>Fri, 12 Jul 2024 16:06:32 +0800</pubDate><guid>/post/compile-u6c6n.html</guid><description>编译 编译命令 单文件编译 g++ test.cpp -o test -fsanitize=address cmake和make编译 设置安装目录：设置输出目录（+安装目录） ./configure cmake -S . -B build # 或使用 cd build + cmake ../ cd build make -sj 2 2&amp;gt;&amp;amp;1|grep rror</description></item><item><title>内存管理</title><link>/post/memory-management-z1c7hkf.html</link><pubDate>Thu, 11 Jul 2024 20:16:25 +0800</pubDate><guid>/post/memory-management-z1c7hkf.html</guid><description>内存管理 内存分区 分为代码区、常量区、全局/静态区、堆区、栈区 参考进程地址空间 内存分配位置 参考：进程地址空间 代码 分配位置 char str[] 字符数组 栈或全局区</description></item><item><title>git</title><link>/post/git-2gyb0l.html</link><pubDate>Thu, 11 Jul 2024 09:29:35 +0800</pubDate><guid>/post/git-2gyb0l.html</guid><description>git ​​ ​​ 远程仓库 查看远程仓库地址 git remote -v clone代码 git clone 指定分支 git clone -b master http://gitslab.yiqing.com/declare/about.git 相关问题（+git 更新） Failed to connect to github.com port 443 after 21007 ms 方法：使用镜像网站 https://ghproxy.com/</description></item><item><title>函数</title><link>/post/function-1er6xb.html</link><pubDate>Wed, 10 Jul 2024 23:45:33 +0800</pubDate><guid>/post/function-1er6xb.html</guid><description>函数 函数重载 函数重写 函数隐藏 函数重载 函数重写（覆盖） 函数隐藏 相同的函数名 不同的参数列表（函数的参数数目和类型，以及参数的排列顺序 不同也可） 相</description></item><item><title>string字符串</title><link>/post/string-string-1g9olm.html</link><pubDate>Wed, 10 Jul 2024 23:42:16 +0800</pubDate><guid>/post/string-string-1g9olm.html</guid><description>string字符串 翻转字符串 reverse(s.begin(), s.end()); reverse(s.begin()+i , s.begin()+i+k); // 翻转以i为起始的k个字符串 void reverse(char *str, int n){ std::reverse(str, str+n); } 分割split void SplitString(const std::string&amp;amp; s, std::vector&amp;lt;std::string&amp;gt;&amp;amp; v, const std::string&amp;amp; c) { std::string::size_type pos1, pos2; pos2 = s.find(c); pos1 = 0; while(std::string::npos != pos2)</description></item><item><title>类</title><link>/post/kind-z2cvctu.html</link><pubDate>Wed, 10 Jul 2024 20:24:49 +0800</pubDate><guid>/post/kind-z2cvctu.html</guid><description>类 struct class struct 默认访问权限 private public 默认继承 private public 定义模板参数 （代替typename） √ × C++对struct进行了拓展，和C中的struct不同 封装 与C</description></item><item><title>set堆</title><link>/post/set-pile-2vfocg.html</link><pubDate>Tue, 09 Jul 2024 10:57:10 +0800</pubDate><guid>/post/set-pile-2vfocg.html</guid><description>set堆 **==完全二叉树==**​（不是平衡二叉树） 可以使用数组实现 任意节点的值是其子树所有节点的最值 小根堆中最大的数一定是放在叶子节点上</description></item><item><title>网络通信</title><link>/post/telecommunication-ot0ya.html</link><pubDate>Tue, 09 Jul 2024 10:21:15 +0800</pubDate><guid>/post/telecommunication-ot0ya.html</guid><description>网络通信 TCP/IP模型(+OSI模型 + 常用协议) OSI模型 TCP/IP模型 功能 数据封装 常用协议（设备） 应用层 应用层 数据message HTT</description></item><item><title>并发</title><link>/post/concurrent-zcq7q0.html</link><pubDate>Tue, 09 Jul 2024 10:20:43 +0800</pubDate><guid>/post/concurrent-zcq7q0.html</guid><description>并发 进程 线程 协程 本质 资源分配 CPU调度的最小单位 用户态线程 在堆上模拟栈 + 实现调度器 通信 进程通信IPC 共享内存 切换开销 CPU的上下文切换（保存</description></item></channel></rss>